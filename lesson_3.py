# Задание 1:
# Срезы
print("--- --- --- --- ---")
print('Задание 1:')
print("Срезы")
print()

str = 'Hello world!'
print(str)
print(str[0])		# вывод символа №0(т.е. 1-ый, т.к. счет начинается с 0)
print(str[2:5])		# вывод символов с №2 по №5 по порядку
print(str[2:])		# вывод символов с №2 до конца
print(str*2)		# вывод символов подряд 2-жды

# Дублирование строки:
print(len('example'))

# вызов элемента переменной по индексу
ex = 'primer'
print(ex[2])
print(ex[-2])
print(ex[-3])

# извлечение среза
srez = 'MyNameIsAlex'
print(srez[1:6])
print(srez[5:7])

# задаем шаг
srez = 'MyNameIsAlex'
print(srez[7::-2])
print(srez[2::3])

# Задание 2:
# Срезы
print("--- --- --- --- ---")
print('Задание 2:')
print()

# Поиграемся со срезами и множественным присваиванием:
# 0) Создадим несколько переменных множественным присваиванием,
# которые будут содержать текстовую информацию.
# 1) Вывести первый и последний элемент любой переменной.
# 2) Вывести часть текста с интервалом любой из переменных.
a, b, c, d = 'MyLand', 'FirstName', 'island', 'MyNameAlex'	# #0
print(b[0], b[-1], d[0], d[-1])								# #1
print(a[1::2], b[5::-2], c[-1::-2], d[2::2])				# #2

print("--- --- --- --- ---")
print()
# Массив
# int - целые числа
1
# float - дробные числа
1.5
# str - строка
'String'
# true, false - булевые значения ДА или НЕТ
True, False
# none - ничего, отсутствие значения
None

(2, 'other_string', False, None)
[2, 'other_string', False, None]
a = {'first':2, 'second':'other_string', 'tree':False, 'four':None}
print(a['first'], a['tree'])

# Кортеж (tuple)
# Как создать кортеж
a = tuple()
a = () # круглые скобки - указатель кортежа
a = ('n',) # если хотим кортеж из одного элемента, исп.запятую
a = ('a', 'n', 'y')

# Задание 3:
print("--- --- --- --- ---")
print('Задание 3:')
print()
# Условие:
# - Создать переменную со стринговым типом данных
# - Срезать оттуда элементы строки
# - Записать их в кортеж
# - Достать любой элемент кортежа
new = 'ToCreateTheVariableOfStringType'
srez = new[2:19]
print(srez)
a = tuple(srez)
print(a[6:9])

print("--- --- --- --- ---")
print()
# Список [list]
# создаем ist
mylist = []
mylist2 = list()
fulllist = [2,2,8]
# Способы передать список
list_a = [1, 3, 5, 7]
print(list_a)
list_b = list_a[:]
print(list_b)

list_c = [2,2,8,8,2,2]
list_a = list(list_c)
print(list_a)

list_b = list_c
print(list_b)

# так же передавать можно командой  .extend()
a = [1, 2]
b = [3, 4]
a.extend(b)
print(a)

# для добавления элементов в список есть метод  .append()
list_a = ['386 8']
print(list_a)
list_a.append('278')
print(list_a)

# list.insert(i,x)  -  Вставить элемент x в позицию i.  
# Первый аргумент – индекс элемента после которого будет вставлен элемент x.
a = [29,68,278]
a.insert(1, 38)
print(a)

# для удаления служит элемент  .remove()
a = [29,68,278]
print(a)
a.insert(1, 38)
print(a)
a.remove(68)
print(a)

list_b = [375,25,903,80,60]
print(list_b)
del list_b[1]
print(list_b)

# Обращение к элементам списка
list = ['abcd', 786 , 2.23, 'ivan', 70.2]
tinylist = [123, 'ivan']
print (list) 				# Вывод всего списка
print (list[0]) 			# Вывод первого элемента списка
print (list[1:3]) 			# Вывод элементов со второго по третий
print (list[2:]) 			# Вывод элементов начиная с третьего
print (tinylist * 2) 		# Вывод списка дважды
print (list + tinylist) 	# Вывод результирующего списка

# list.reverse()  -  меняет порядок списка на обратный
a = [1, 3, 5, 7, 9]
print(a)
a.reverse()
print(a)

# Списки можно сортировать командой sort(), если элементы списка можно сравнить.
a = [[1,2,3,4], [2,3,4], [1,2,3,4], [1,2,3,4,5], [10], [2,-100], [1,3,2,4], [1,2,3,4]]
sorted(a)
print(a)

# генератор списка
mylist = [mylist * 3 for mylist in 'list']
print(mylist)

print("Пример 1")
a = []							# Пример 1
for i in range(1,10):
	a.append(i)
print(a)

print("Пример 2")
a = [i for i in range(1,10)]	# Пример 2
print(a)

x = [x*3 for x in 'Hello']
print(x)
x = [x*5 for x in 'Hello' if x != 'l']
print(x)

# Задание 4:
print("--- --- --- --- ---")
print('Задание 4:')
print()
# Условие:
# - Создать генератор списка который проходит по строке и выводит её элементы.
# - Создать генератор списка от 1 до 10, который выводит квадраты чисел.
x = [x for x in 'Generate']
print(x)
x = [x**2 for x in range(1,8)]
print(x)

print("--- --- --- --- ---")
print()
# Словарь  {dict}
# Словари в Python - неупорядоченные коллекции произвольных объектов
# с доступом по ключу
d = {'dict': 1, 'dictionary': 2}
print(d)
print(d['dict'])

# Dictionary = {ключ1: значение1, ключ2: значение2} — все словари указываются
# в фигурных скобках.

# Внутри словаря прописываются пары ключ:значение. Как ключ, так и значение
# могут представлять собой любой тип данных, кроме списков и словарей.

# Задание 5:
print("--- --- --- --- ---")
print('Задание 5:')
print()
# Условие:
# Создать словарь содержащий ключи «имя», «возраст», «любимая_еда» и
# соответствующие значения.

dictonary = {'name': 'Alex', 'age': '27', 1: 'pizza'}
print('My name is ', dictonary['name'], '. I am ', dictonary['age'], '. I like is', dictonary[1], '!')

print("--- --- --- --- ---")
print()

# Функция преобразования dict().
# Передав в эту функцию двумерный список с парами ключ-значение, вы получите
# готовый словарь. 
dict([['Имя', 'Алексей'], ['Возраст', '27']])
{'Имя': 'Алексей', 'Возраст': '27'}
#  a = dict.fromkeys([ключи], значение)
# Присваивает одинаковые значения, пример:
a = dict.fromkeys(['ex1','ex2','ex3'], 246)
print(a)
#  dictname.get(ключ, альтернативное_значение)
# Этот метод возвращает значение из словаря по связанному с ним ключу.
# Если такого ключа не найдена, то вместо ошибки метод попросту вернет
# указанное вами альтернативное значение.
dict = {'Имя': 'Алексей', 'Возраст': '27'}
element = dict.get('Имя', 'Ошибка')
print(element)
element = dict.get('яблоко', 'Возраст')
print(element)


# Задание Финальное:
print("--- --- --- --- ---")
print('Задание Финальное:')
print()
# Условие:
# - Дана строка.
# - Сначала выведите третий символ этой строки.
# - Во второй строке выведите предпоследний символ этой строки.
# - В третьей строке выведите первые пять символов этой строки.
# - В четвертой строке выведите всю строку, кроме последних двух символов.
# - В пятой строке выведите все символы с четными индексами (считая, что
# индексация начинается с 0, поэтому символы выводятся начиная с первого).
# - В шестой строке выведите все символы с нечетными индексами, то есть
# начиная со второго символа строки.
# - В седьмой строке выведите все символы в обратном порядке.
# - В восьмой строке выведите все символы строки через один в обратном
# порядке, начиная с последнего.
# - В девятой строке выведите длину данной строки.

s = 'Фальшивочка'
print(s)			# - Дана строка.
print(s[2])			# - Сначала выведите третий символ этой строки.
print(s[-2])		# - Во второй строке выведите предпоследний символ этой
# строки.
print(s[:5])		# - В третьей строке выведите первые пять символов этой
# строки.
print(s[:-2])		# - В четвертой строке выведите всю строку, кроме
# последних двух символов.
print(s[::2]) 		# - В пятой строке выведите все символы с четными индексами
# (считая, что индексация начинается с 0, поэтому символы выводятся начиная
# с первого).
print(s[1::2])		# - В шестой строке выведите все символы с нечетными
# индексами, то есть начиная со второго символа строки.
print(s[::-1])		# - В седьмой строке выведите все символы в обратном
# порядке.
print(s[::-2])		# - В восьмой строке выведите все символы строки через
# один в обратном порядке, начиная с последнего.
print(len(s))		# - В девятой строке выведите длину данной строки.

print("--- --- --- --- ---")
print()

# Задание Финальное1:
print("--- --- --- --- ---")
print('Задание Финальное1:')
print()

import random as r

#1 - Создайте список чисел, вывести минимальный и максимальный элемент списка.
print('#1: - - - - - - - - - - - - - - - - - - - -')

a = []
for _ in range(r.randint(10, 20)):
	a.append(r.randint(-100, 100))
print(a)
print('min:', min(a), 'max:', max(a))

#2 - Заполнить список нулями и единицами, при этом данные значения чередуются,
# начиная с нуля.
print('#2: - - - - - - - - - - - - - - - - - - - -')

a = []
for _ in range(r.randint(10, 20)):
	a.append(r.randint(-100, 100))
print(a)

for i in range(len(a)):
	if i % 2 == 0:
		a[i] = 0
	else:
		a[i] = 1
print(a)

#3 - Заполнить список нулями, кроме первого и последнего элементов, которые
# должны быть равны единице.
print('#3: - - - - - - - - - - - - - - - - - - - -')

a = []
for _ in range(r.randint(10, 20)):
	a.append(r.randint(-100, 100))
print(a)

for i in range(len(a)):
	a[i] = 0
print(a)
a[0] = 1
a[-1] = 1
print(a)
#4 - Определите, есть ли в списке повторяющиеся элементы,
# если да, то вывести на экран это значение.
print('#4: - - - - - - - - - - - - - - - - - - - -')

a = []
for _ in range(r.randint(6, 10)):
	a.append(r.randint(-3, 3))
print(a)

from collections import Counter

print([x for x, v in Counter(a).items() if v>1])